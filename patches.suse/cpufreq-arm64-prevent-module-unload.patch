From 629e57a29371fa2f917777ae8e0610d9de8a3c05 Mon Sep 17 00:00:00 2001
From: Mian Yousaf Kaukab <yousaf.kaukab@suse.com>
Date: Wed, 8 Apr 2020 12:47:09 +0200
Subject: [PATCH] cpufreq: arm64: prevent module unload

Patch-mainline: Never, Workaround for a kernel crash
References: bsc#1168476

Signed-off-by: Mian Yousaf Kaukab <yousaf.kaukab@suse.com>
---
 drivers/cpufreq/armada-37xx-cpufreq.c | 2 ++
 drivers/cpufreq/armada-8k-cpufreq.c   | 3 +++
 drivers/cpufreq/cpufreq-dt.c          | 3 +++
 drivers/cpufreq/qoriq-cpufreq.c       | 4 +++-
 drivers/cpufreq/raspberrypi-cpufreq.c | 2 ++
 drivers/cpufreq/tegra124-cpufreq.c    | 2 ++
 drivers/cpufreq/tegra186-cpufreq.c    | 2 ++
 include/linux/cpufreq.h               | 7 +++++++
 8 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/drivers/cpufreq/armada-37xx-cpufreq.c b/drivers/cpufreq/armada-37xx-cpufreq.c
index aa0f06dec959..da83537a92d6 100644
--- a/drivers/cpufreq/armada-37xx-cpufreq.c
+++ b/drivers/cpufreq/armada-37xx-cpufreq.c
@@ -478,6 +478,8 @@ static int __init armada37xx_cpufreq_driver_init(void)
 
 	kfree(armada37xx_cpufreq_state);
 
+	cpufreq_disable_module_unload();
+
 	return ret;
 }
 /* late_initcall, to guarantee the driver is loaded after A37xx clock driver */
diff --git a/drivers/cpufreq/armada-8k-cpufreq.c b/drivers/cpufreq/armada-8k-cpufreq.c
index 39e34f5066d3..27593e5886ee 100644
--- a/drivers/cpufreq/armada-8k-cpufreq.c
+++ b/drivers/cpufreq/armada-8k-cpufreq.c
@@ -20,6 +20,7 @@
 #include <linux/platform_device.h>
 #include <linux/pm_opp.h>
 #include <linux/slab.h>
+#include <linux/cpufreq.h>
 
 /*
  * Setup the opps list with the divider for the max frequency, that
@@ -187,6 +188,8 @@ static int __init armada_8k_cpufreq_init(void)
 
 	platform_set_drvdata(armada_8k_pdev, freq_tables);
 
+	cpufreq_disable_module_unload();
+
 	return 0;
 
 remove_opp:
diff --git a/drivers/cpufreq/cpufreq-dt.c b/drivers/cpufreq/cpufreq-dt.c
index d2b5f062a07b..dd50012321ac 100644
--- a/drivers/cpufreq/cpufreq-dt.c
+++ b/drivers/cpufreq/cpufreq-dt.c
@@ -369,6 +369,9 @@ static int dt_cpufreq_probe(struct platform_device *pdev)
 	if (ret)
 		dev_err(&pdev->dev, "failed register driver: %d\n", ret);
 
+	if (!ret)
+		cpufreq_disable_module_unload();
+
 	return ret;
 }
 
diff --git a/drivers/cpufreq/qoriq-cpufreq.c b/drivers/cpufreq/qoriq-cpufreq.c
index 8e436dc75c8b..e3cf978ba252 100644
--- a/drivers/cpufreq/qoriq-cpufreq.c
+++ b/drivers/cpufreq/qoriq-cpufreq.c
@@ -309,8 +309,10 @@ static int __init qoriq_cpufreq_init(void)
 		return -ENODEV;
 
 	ret = cpufreq_register_driver(&qoriq_cpufreq_driver);
-	if (!ret)
+	if (!ret) {
 		pr_info("Freescale QorIQ CPU frequency scaling driver\n");
+		cpufreq_disable_module_unload();
+	}
 
 	return ret;
 }
diff --git a/drivers/cpufreq/raspberrypi-cpufreq.c b/drivers/cpufreq/raspberrypi-cpufreq.c
index 2bc7d9734272..8102272c9944 100644
--- a/drivers/cpufreq/raspberrypi-cpufreq.c
+++ b/drivers/cpufreq/raspberrypi-cpufreq.c
@@ -57,6 +57,8 @@ static int raspberrypi_cpufreq_probe(struct platform_device *pdev)
 		goto remove_opp;
 	}
 
+	cpufreq_disable_module_unload();
+
 	return 0;
 
 remove_opp:
diff --git a/drivers/cpufreq/tegra124-cpufreq.c b/drivers/cpufreq/tegra124-cpufreq.c
index 7a1ea6fdcab6..d31a786bac3f 100644
--- a/drivers/cpufreq/tegra124-cpufreq.c
+++ b/drivers/cpufreq/tegra124-cpufreq.c
@@ -113,6 +113,8 @@ static int tegra124_cpufreq_probe(struct platform_device *pdev)
 
 	of_node_put(np);
 
+	cpufreq_disable_module_unload();
+
 	return 0;
 
 out_put_pllp_clk:
diff --git a/drivers/cpufreq/tegra186-cpufreq.c b/drivers/cpufreq/tegra186-cpufreq.c
index 6ce6298bd2d7..702d2eeaefb6 100644
--- a/drivers/cpufreq/tegra186-cpufreq.c
+++ b/drivers/cpufreq/tegra186-cpufreq.c
@@ -233,6 +233,8 @@ static int tegra186_cpufreq_probe(struct platform_device *pdev)
 	if (err)
 		return err;
 
+	cpufreq_disable_module_unload();
+
 	return 0;
 
 put_bpmp:
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 536a049d7ecc..25c9966f81cb 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -979,6 +979,13 @@ static inline void sched_cpufreq_governor_change(struct cpufreq_policy *policy,
 			struct cpufreq_governor *old_gov) { }
 #endif
 
+#ifdef CONFIG_ARM64
+/* Prevent cpufreq modules unloading.  Workaround for bsc#1168476. */
+#define cpufreq_disable_module_unload() try_module_get(THIS_MODULE)
+#else
+#define cpufreq_disable_module_unload()
+#endif
+
 extern void arch_freq_prepare_all(void);
 extern unsigned int arch_freq_get_on_cpu(int cpu);
 
-- 
2.16.4

