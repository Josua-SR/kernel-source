From: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
Date: Fri, 2 Oct 2020 11:47:32 -0700
Subject: PCI/RCEC: Add RCiEP's linked RCEC to AER/ERR
Git-repo: git://git.kernel.org/pub/scm/linux/kernel/git/pci.git#pci/err
Git-commit: 7fcf5a2e044ec64aa5c1d267316c8160f4fa6848
Patch-mainline: Queued in subsystem maintainer repository
References: jsc#SLE-13736 jsc#SLE-14845

When attempting error recovery for an RCiEP associated with an RCEC device,
there needs to be a way to update the Root Error Status, the Uncorrectable
Error Status and the Uncorrectable Error Severity of the parent RCEC.  In
some non-native cases in which there is no OS-visible device associated
with the RCiEP, there is nothing to act upon as the firmware is acting
before the OS.

Add handling for the linked RCEC in AER/ERR while taking into account
non-native cases.

Co-developed-by: Sean V Kelley <sean.v.kelley@intel.com>
Link: https://lore.kernel.org/r/20201002184735.1229220-12-seanvk.dev@oregontracks.org
Signed-off-by: Sean V Kelley <sean.v.kelley@intel.com>
Signed-off-by: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 drivers/pci/pcie/aer.c |    9 +++++----
 drivers/pci/pcie/err.c |   38 +++++++++++++++++++++++++++-----------
 2 files changed, 32 insertions(+), 15 deletions(-)

--- a/drivers/pci/pcie/aer.c
+++ b/drivers/pci/pcie/aer.c
@@ -1308,7 +1308,7 @@ static pci_ers_result_t aer_root_reset(s
 	int aer;
 	struct pci_host_bridge *host = pci_find_host_bridge(dev->bus);
 	u32 reg32;
-	int rc;
+	int rc = 0;
 
 	/*
 	 * Only Root Ports and RCECs have AER Root Command and Root Status
@@ -1343,9 +1343,10 @@ static pci_ers_result_t aer_root_reset(s
 			rc = -ENOTTY;
 		}
 	} else {
-		rc = pci_bus_error_reset(dev);
-		pci_info(dev, "%s Port link has been reset (%d)\n",
-			pci_is_root_bus(dev->bus) ? "Root" : "Downstream", rc);
+		if (pci_pcie_type(dev) != PCI_EXP_TYPE_RC_EC) {
+			rc = pci_bus_error_reset(dev);
+			pci_info(dev, "Root Port link has been reset\n");
+		}
 	}
 
 	if ((host->native_aer || pcie_ports_native) && aer) {
--- a/drivers/pci/pcie/err.c
+++ b/drivers/pci/pcie/err.c
@@ -146,6 +146,7 @@ out:
  * pci_walk_bridge - walk bridges potentially AER affected
  * @bridge:    bridge which may be a Port, an RCEC, or an RCiEP
  * @cb:                callback to be called for each device found
+ * @dev:       an RCiEP lacking an associated RCEC
  * @userdata:  arbitrary pointer to be passed to callback
  *
  * If the device provided is a bridge, walk the subordinate bus, including
@@ -156,13 +157,20 @@ out:
  * call the callback on the device itself.
  */
 static void pci_walk_bridge(struct pci_dev *bridge,
+			   struct pci_dev *dev,
                            int (*cb)(struct pci_dev *, void *),
                            void *userdata)
 {
-       if (bridge->subordinate)
+	/*
+	 * In a non-native case where there is no OS-visible reporting
+	 * device the bridge will be NULL, i.e., no RCEC, no Downstream Port.
+	 */
+	if (bridge && bridge->subordinate)
                pci_walk_bus(bridge->subordinate, cb, userdata);
-       else
+	else if (bridge)
 	       cb(bridge, userdata);
+	else
+		cb(dev, userdata);
 }
 
 static pci_ers_result_t flr_on_rciep(struct pci_dev *dev)
@@ -196,16 +204,24 @@ pci_ers_result_t pcie_do_recovery(struct
 	 */
 	if (type == PCI_EXP_TYPE_ROOT_PORT ||
 	      type == PCI_EXP_TYPE_DOWNSTREAM ||
-	      type == PCI_EXP_TYPE_RC_EC ||
-	      type == PCI_EXP_TYPE_RC_END)
+	      type == PCI_EXP_TYPE_RC_EC)
 		bridge = dev;
+	else if (type == PCI_EXP_TYPE_RC_END)
+		bridge = dev->rcec;
 	else
 		bridge = pci_upstream_bridge(dev);
 
 	pci_dbg(bridge, "broadcast error_detected message\n");
 	if (state == pci_channel_io_frozen) {
-		pci_walk_bridge(bridge, report_frozen_detected, &status);
+		pci_walk_bridge(bridge, dev, report_frozen_detected, &status);
 		if (type == PCI_EXP_TYPE_RC_END) {
+			/*
+			 * The callback only clears the Root Error Status
+			 * of the RCEC (see aer.c). Only perform this for the
+			 * native case, i.e., an RCEC is present.
+			 */
+			if (bridge)
+				reset_subordinates(bridge);
 			if (status != PCI_ERS_RESULT_RECOVERED) {
 				pci_warn(dev, "Function Level Reset failed\n");
 				goto failed;
@@ -218,13 +234,13 @@ pci_ers_result_t pcie_do_recovery(struct
 			}
 		}
 	} else {
-		pci_walk_bridge(bridge, report_normal_detected, &status);
+		pci_walk_bridge(bridge, dev, report_normal_detected, &status);
 	}
 
 	if (status == PCI_ERS_RESULT_CAN_RECOVER) {
 		status = PCI_ERS_RESULT_RECOVERED;
 		pci_dbg(bridge, "broadcast mmio_enabled message\n");
-		pci_walk_bridge(bridge, report_mmio_enabled, &status);
+		pci_walk_bridge(bridge, dev, report_mmio_enabled, &status);
 	}
 
 	if (status == PCI_ERS_RESULT_NEED_RESET) {
@@ -235,14 +251,14 @@ pci_ers_result_t pcie_do_recovery(struct
 		 */
 		status = PCI_ERS_RESULT_RECOVERED;
 		pci_dbg(bridge, "broadcast slot_reset message\n");
-		pci_walk_bridge(bridge, report_slot_reset, &status);
+		pci_walk_bridge(bridge, dev, report_slot_reset, &status);
 	}
 
 	if (status != PCI_ERS_RESULT_RECOVERED)
 		goto failed;
 
 	pci_dbg(bridge, "broadcast resume message\n");
-	pci_walk_bridge(bridge, report_resume, &status);
+	pci_walk_bridge(bridge, dev, report_resume, &status);
 
 	/*
 	 * If we have native control of AER, clear error status in the device
