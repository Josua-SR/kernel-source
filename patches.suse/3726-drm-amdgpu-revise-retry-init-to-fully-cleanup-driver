From: Pixel Ding <Pixel.Ding@amd.com>
Date: Wed, 8 Nov 2017 11:03:14 +0800
Subject: drm/amdgpu: revise retry init to fully cleanup driver
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Git-commit: 1daee8b472e896f477e490ca66e58d1f8f0f4e61
Patch-mainline: v4.16-rc1
References: FATE#326289 FATE#326079 FATE#326049 FATE#322398 FATE#326166

Retry at drm_dev_register instead of amdgpu_device_init.

Reviewed-by: Christian KÃ¶nig <christian.koenig@amd.com>
Signed-off-by: Pixel Ding <Pixel.Ding@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 drivers/gpu/drm/amd/amdgpu/amdgpu_device.c |    3 +++
 drivers/gpu/drm/amd/amdgpu/amdgpu_drv.c    |   11 +++++++++--
 drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c    |   15 ++-------------
 3 files changed, 14 insertions(+), 15 deletions(-)

--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
@@ -2390,6 +2390,9 @@ int amdgpu_device_init(struct amdgpu_dev
 		    amdgpu_virt_mmio_blocked(adev) &&
 		    !amdgpu_virt_wait_reset(adev)) {
 			dev_err(adev->dev, "VF exclusive mode timeout\n");
+			/* Don't send request since VF is inactive. */
+			adev->virt.caps &= ~AMDGPU_SRIOV_CAPS_RUNTIME;
+			adev->virt.ops = NULL;
 			r = -EAGAIN;
 			goto failed;
 		}
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_drv.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_drv.c
@@ -565,12 +565,13 @@ static int amdgpu_kick_out_firmware_fb(s
 	return 0;
 }
 
+
 static int amdgpu_pci_probe(struct pci_dev *pdev,
 			    const struct pci_device_id *ent)
 {
 	struct drm_device *dev;
 	unsigned long flags = ent->driver_data;
-	int ret;
+	int ret, retry = 0;
 
 	if ((flags & AMD_EXP_HW_SUPPORT) && !amdgpu_exp_hw_support) {
 		DRM_INFO("This hardware requires experimental hardware support.\n"
@@ -603,8 +604,14 @@ static int amdgpu_pci_probe(struct pci_d
 
 	pci_set_drvdata(pdev, dev);
 
+retry_init:
 	ret = drm_dev_register(dev, ent->driver_data);
-	if (ret)
+	if (ret == -EAGAIN && ++retry <= 3) {
+		DRM_INFO("retry init %d\n", retry);
+		/* Don't request EX mode too frequently which is attacking */
+		msleep(5000);
+		goto retry_init;
+	} else if (ret)
 		goto err_pci;
 
 	return 0;
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c
@@ -84,7 +84,7 @@ done_free:
 int amdgpu_driver_load_kms(struct drm_device *dev, unsigned long flags)
 {
 	struct amdgpu_device *adev;
-	int r, acpi_status, retry = 0;
+	int r, acpi_status;
 
 #ifdef CONFIG_DRM_AMDGPU_SI
 	if (!amdgpu_si_support) {
@@ -120,7 +120,6 @@ int amdgpu_driver_load_kms(struct drm_de
 		}
 	}
 #endif
-retry_init:
 
 	adev = kzalloc(sizeof(struct amdgpu_device), GFP_KERNEL);
 	if (adev == NULL) {
@@ -143,17 +142,7 @@ retry_init:
 	 * VRAM allocation
 	 */
 	r = amdgpu_device_init(adev, dev, dev->pdev, flags);
-	if (r == -EAGAIN && ++retry <= 3) {
-		adev->virt.caps &= ~AMDGPU_SRIOV_CAPS_RUNTIME;
-		adev->virt.ops = NULL;
-		amdgpu_device_fini(adev);
-		kfree(adev);
-		dev->dev_private = NULL;
-		/* Don't request EX mode too frequently which is attacking */
-		msleep(5000);
-		dev_err(&dev->pdev->dev, "retry init %d\n", retry);
-		goto retry_init;
-	} else if (r) {
+	if (r) {
 		dev_err(&dev->pdev->dev, "Fatal error during GPU init\n");
 		goto out;
 	}
