From: Jiri Pirko <jiri@mellanox.com>
Date: Sun, 8 Jul 2018 23:51:18 +0300
Subject: mlxsw: spectrum_kvdl: Pass entry_count to free function
Patch-mainline: v4.19-rc1
Git-commit: 0304c00546fce74028ce5e3ea5990e784c67a8a3
References: bsc#1112374

For the Spectrum-2 KVD linear manager implementation, entry_count will be
needed even for the free function. So pass it down.

Signed-off-by: Jiri Pirko <jiri@mellanox.com>
Signed-off-by: Ido Schimmel <idosch@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
---
 drivers/net/ethernet/mellanox/mlxsw/spectrum.h                  |    4 ++--
 drivers/net/ethernet/mellanox/mlxsw/spectrum1_kvdl.c            |    2 +-
 drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_flex_actions.c |    8 ++++----
 drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c             |    5 +++--
 drivers/net/ethernet/mellanox/mlxsw/spectrum_mr_tcam.c          |    2 +-
 drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c           |    6 +++---
 6 files changed, 14 insertions(+), 13 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
@@ -467,7 +467,7 @@ struct mlxsw_sp_kvdl_ops {
 		     unsigned int entry_count, u32 *p_entry_index);
 	void (*free)(struct mlxsw_sp *mlxsw_sp, void *priv,
 		     enum mlxsw_sp_kvdl_entry_type type,
-		     int entry_index);
+		     unsigned int entry_count, int entry_index);
 	int (*alloc_size_query)(struct mlxsw_sp *mlxsw_sp, void *priv,
 				enum mlxsw_sp_kvdl_entry_type type,
 				unsigned int entry_count,
@@ -482,7 +482,7 @@ int mlxsw_sp_kvdl_alloc(struct mlxsw_sp
 			unsigned int entry_count, u32 *p_entry_index);
 void mlxsw_sp_kvdl_free(struct mlxsw_sp *mlxsw_sp,
 			enum mlxsw_sp_kvdl_entry_type type,
-			int entry_index);
+			unsigned int entry_count, int entry_index);
 int mlxsw_sp_kvdl_alloc_count_query(struct mlxsw_sp *mlxsw_sp,
 				    enum mlxsw_sp_kvdl_entry_type type,
 				    unsigned int entry_count,
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum1_kvdl.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum1_kvdl.c
@@ -194,7 +194,7 @@ static int mlxsw_sp1_kvdl_alloc(struct m
 
 static void mlxsw_sp1_kvdl_free(struct mlxsw_sp *mlxsw_sp, void *priv,
 				enum mlxsw_sp_kvdl_entry_type type,
-				int entry_index)
+				unsigned int entry_count, int entry_index)
 {
 	struct mlxsw_sp1_kvdl *kvdl = priv;
 	struct mlxsw_sp1_kvdl_part *part;
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_flex_actions.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_flex_actions.c
@@ -64,7 +64,7 @@ static int mlxsw_sp_act_kvdl_set_add(voi
 
 err_pefa_write:
 	mlxsw_sp_kvdl_free(mlxsw_sp, MLXSW_SP_KVDL_ENTRY_TYPE_ACTSET,
-			   kvdl_index);
+			   1, kvdl_index);
 	return err;
 }
 
@@ -76,7 +76,7 @@ static void mlxsw_sp_act_kvdl_set_del(vo
 	if (is_first)
 		return;
 	mlxsw_sp_kvdl_free(mlxsw_sp, MLXSW_SP_KVDL_ENTRY_TYPE_ACTSET,
-			   kvdl_index);
+			   1, kvdl_index);
 }
 
 static int mlxsw_sp_act_kvdl_fwd_entry_add(void *priv, u32 *p_kvdl_index,
@@ -100,7 +100,7 @@ static int mlxsw_sp_act_kvdl_fwd_entry_a
 
 err_ppbs_write:
 	mlxsw_sp_kvdl_free(mlxsw_sp, MLXSW_SP_KVDL_ENTRY_TYPE_PBS,
-			   kvdl_index);
+			   1, kvdl_index);
 	return err;
 }
 
@@ -109,7 +109,7 @@ static void mlxsw_sp_act_kvdl_fwd_entry_
 	struct mlxsw_sp *mlxsw_sp = priv;
 
 	mlxsw_sp_kvdl_free(mlxsw_sp, MLXSW_SP_KVDL_ENTRY_TYPE_PBS,
-			   kvdl_index);
+			   1, kvdl_index);
 }
 
 static int
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
@@ -86,11 +86,12 @@ int mlxsw_sp_kvdl_alloc(struct mlxsw_sp
 
 void mlxsw_sp_kvdl_free(struct mlxsw_sp *mlxsw_sp,
 			enum mlxsw_sp_kvdl_entry_type type,
-			int entry_index)
+			unsigned int entry_count, int entry_index)
 {
 	struct mlxsw_sp_kvdl *kvdl = mlxsw_sp->kvdl;
 
-	kvdl->kvdl_ops->free(mlxsw_sp, kvdl->priv, type, entry_index);
+	kvdl->kvdl_ops->free(mlxsw_sp, kvdl->priv, type,
+			     entry_count, entry_index);
 }
 
 int mlxsw_sp_kvdl_alloc_count_query(struct mlxsw_sp *mlxsw_sp,
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_mr_tcam.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_mr_tcam.c
@@ -111,7 +111,7 @@ mlxsw_sp_mr_erif_sublist_destroy(struct
 {
 	list_del(&erif_sublist->list);
 	mlxsw_sp_kvdl_free(mlxsw_sp, MLXSW_SP_KVDL_ENTRY_TYPE_MCRIGR,
-			   erif_sublist->rigr2_kvdl_index);
+			   1, erif_sublist->rigr2_kvdl_index);
 	kfree(erif_sublist);
 }
 
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@ -1124,7 +1124,7 @@ static void mlxsw_sp_fib_entry_decap_fin
 	fib_entry->decap.ipip_entry->decap_fib_entry = NULL;
 	fib_entry->decap.ipip_entry = NULL;
 	mlxsw_sp_kvdl_free(mlxsw_sp, MLXSW_SP_KVDL_ENTRY_TYPE_ADJ,
-			   fib_entry->decap.tunnel_index);
+			   1, fib_entry->decap.tunnel_index);
 }
 
 static struct mlxsw_sp_fib_node *
@@ -3311,7 +3311,7 @@ mlxsw_sp_nexthop_group_refresh(struct ml
 	err = mlxsw_sp_adj_index_mass_update(mlxsw_sp, nh_grp,
 					     old_adj_index, old_ecmp_size);
 	mlxsw_sp_kvdl_free(mlxsw_sp, MLXSW_SP_KVDL_ENTRY_TYPE_ADJ,
-			   old_adj_index);
+			   old_ecmp_size, old_adj_index);
 	if (err) {
 		dev_warn(mlxsw_sp->bus_info->dev, "Failed to mass-update adjacency index for nexthop group.\n");
 		goto set_trap;
@@ -3334,7 +3334,7 @@ set_trap:
 		dev_warn(mlxsw_sp->bus_info->dev, "Failed to set traps for fib entries.\n");
 	if (old_adj_index_valid)
 		mlxsw_sp_kvdl_free(mlxsw_sp, MLXSW_SP_KVDL_ENTRY_TYPE_ADJ,
-				   nh_grp->adj_index);
+				   nh_grp->ecmp_size, nh_grp->adj_index);
 }
 
 static void __mlxsw_sp_nexthop_neigh_update(struct mlxsw_sp_nexthop *nh,
