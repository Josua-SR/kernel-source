From: Ben Skeggs <bskeggs@redhat.com>
Date: Wed, 1 Nov 2017 03:56:19 +1000
Subject: drm/nouveau/bar: prevent BAR2 mapping of objects during destructor
Git-commit: bb7e501a661f820788279063fd9e225bbe9c38e9
Patch-mainline: v4.15-rc1
References: FATE#326289 FATE#326079 FATE#326049 FATE#322398 FATE#326166

GP100's page table nests a lot more deeply than the GF100-compatible
layout we're currently using, which means our hackish-but-simple way
of dealing with BAR2 VMM teardown won't work anymore.

In order to sanely handle the chicken-and-egg (BAR2's PTs get mapped
into themselves) problem, we need prevent page tables getting mapped
back into BAR2 during the destruction of its VMM.

To do this, we simply key off the state that's now maintained by the
BAR2 init/fini functions.

Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 drivers/gpu/drm/nouveau/nvkm/subdev/bar/base.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/drivers/gpu/drm/nouveau/nvkm/subdev/bar/base.c
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/bar/base.c
@@ -43,7 +43,7 @@ nvkm_bar_bar2_vmm(struct nvkm_device *de
 	 * to know when object access needs to go through the BAR0 window.
 	 */
 	struct nvkm_bar *bar = device->bar;
-	if (bar && bar->func->bar2.vmm && bar->subdev.oneinit)
+	if (bar && bar->bar2)
 		return bar->func->bar2.vmm(bar);
 	return NULL;
 }
