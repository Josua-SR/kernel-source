From: Harish Kasiviswanathan <Harish.Kasiviswanathan@amd.com>
Date: Fri, 9 Jun 2017 17:47:27 -0400
Subject: drm/amdgpu: vm_update_ptes remove code duplication
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Git-commit: 370f092f30ee6fa0be6eb14d2ddb66ef861c6a3f
Patch-mainline: v4.13-rc1
References: FATE#326289 FATE#326079 FATE#326049 FATE#322398 FATE#326166

CPU and GPU paths were mostly the same.

Acked-by: Christian KÃ¶nig <christian.koenig@amd.com>
Acked-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Harish Kasiviswanathan <Harish.Kasiviswanathan@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c |   73 +++++++--------------------------
 1 file changed, 16 insertions(+), 57 deletions(-)

--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c
@@ -1265,59 +1265,6 @@ static struct amdgpu_bo *amdgpu_vm_get_p
 }
 
 /**
- * amdgpu_vm_update_ptes_cpu - Update the page tables in the range
- *  start - @end using CPU.
- * See amdgpu_vm_update_ptes for parameter description.
- *
- */
-static int amdgpu_vm_update_ptes_cpu(struct amdgpu_pte_update_params *params,
-				     uint64_t start, uint64_t end,
-				     uint64_t dst, uint64_t flags)
-{
-	struct amdgpu_device *adev = params->adev;
-	const uint64_t mask = AMDGPU_VM_PTE_COUNT(adev) - 1;
-	void *pe_ptr;
-	uint64_t addr;
-	struct amdgpu_bo *pt;
-	unsigned int nptes;
-	int r;
-
-	/* initialize the variables */
-	addr = start;
-
-	/* walk over the address space and update the page tables */
-	while (addr < end) {
-		pt = amdgpu_vm_get_pt(params, addr);
-		if (!pt) {
-			pr_err("PT not found, aborting update_ptes\n");
-			return -EINVAL;
-		}
-
-		WARN_ON(params->shadow);
-
-		r = amdgpu_bo_kmap(pt, &pe_ptr);
-		if (r)
-			return r;
-
-		pe_ptr += (addr & mask) * 8;
-
-		if ((addr & ~mask) == (end & ~mask))
-			nptes = end - addr;
-		else
-			nptes = AMDGPU_VM_PTE_COUNT(adev) - (addr & mask);
-
-		params->func(params, (uint64_t)pe_ptr, dst, nptes,
-			     AMDGPU_GPU_PAGE_SIZE, flags);
-
-		amdgpu_bo_kunmap(pt);
-		addr += nptes;
-		dst += nptes * AMDGPU_GPU_PAGE_SIZE;
-	}
-
-	return 0;
-}
-
-/**
  * amdgpu_vm_update_ptes - make sure that page tables are valid
  *
  * @params: see amdgpu_pte_update_params definition
@@ -1340,10 +1287,9 @@ static int amdgpu_vm_update_ptes(struct
 	uint64_t addr, pe_start;
 	struct amdgpu_bo *pt;
 	unsigned nptes;
+	int r;
+	bool use_cpu_update = (params->func == amdgpu_vm_cpu_set_ptes);
 
-	if (params->func == amdgpu_vm_cpu_set_ptes)
-		return amdgpu_vm_update_ptes_cpu(params, start, end,
-						 dst, flags);
 
 	/* walk over the address space and update the page tables */
 	for (addr = start; addr < end; addr += nptes) {
@@ -1354,6 +1300,10 @@ static int amdgpu_vm_update_ptes(struct
 		}
 
 		if (params->shadow) {
+			if (WARN_ONCE(use_cpu_update,
+				"CPU VM update doesn't suuport shadow pages"))
+				return 0;
+
 			if (!pt->shadow)
 				return 0;
 			pt = pt->shadow;
@@ -1364,13 +1314,22 @@ static int amdgpu_vm_update_ptes(struct
 		else
 			nptes = AMDGPU_VM_PTE_COUNT(adev) - (addr & mask);
 
-		pe_start = amdgpu_bo_gpu_offset(pt);
+		if (use_cpu_update) {
+			r = amdgpu_bo_kmap(pt, (void *)&pe_start);
+			if (r)
+				return r;
+		} else
+			pe_start = amdgpu_bo_gpu_offset(pt);
+
 		pe_start += (addr & mask) * 8;
 
 		params->func(params, pe_start, dst, nptes,
 			     AMDGPU_GPU_PAGE_SIZE, flags);
 
 		dst += nptes * AMDGPU_GPU_PAGE_SIZE;
+
+		if (use_cpu_update)
+			amdgpu_bo_kunmap(pt);
 	}
 
 	return 0;
