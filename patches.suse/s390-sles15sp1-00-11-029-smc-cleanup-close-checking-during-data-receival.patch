From: Stefan Raspl <raspl@linux.ibm.com>
Subject: smc: cleanup close checking during data receival
Patch-mainline: v4.16-rc1
Git-commit: 71c125c3f23d714c1d0725ca11c9f27416f697c8
References: FATE#325694, LTC#167874, bsc#1113480

Summary:     net/smc: SMC-R MVP
Description: Add latest upstream patches to push SMC-R to the MVP level

Upstream-Description:

             smc: cleanup close checking during data receival

             When waiting for data to be received it must be checked if the
             peer signals shutdown. The SMC code uses two different checks
             for this purpose, even though just one check is sufficient.
             This patch removes the superfluous test for SOCK_DONE.

             Signed-off-by: Ursula Braun <ubraun@linux.vnet.ibm.com>
             Signed-off-by: David S. Miller <davem@davemloft.net>

Signed-off-by: Stefan Raspl <raspl@linux.ibm.com>
Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 net/smc/smc_rx.c |    5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

--- a/net/smc/smc_rx.c
+++ b/net/smc/smc_rx.c
@@ -64,7 +64,6 @@ static int smc_rx_wait_data(struct smc_s
 	rc = sk_wait_event(sk, timeo,
 			   sk->sk_err ||
 			   sk->sk_shutdown & RCV_SHUTDOWN ||
-			   sock_flag(sk, SOCK_DONE) ||
 			   atomic_read(&conn->bytes_to_rcv) ||
 			   smc_cdc_rxed_any_close_or_senddone(conn),
 			   &wait);
@@ -115,7 +114,7 @@ int smc_rx_recvmsg(struct smc_sock *smc,
 		if (read_done) {
 			if (sk->sk_err ||
 			    sk->sk_state == SMC_CLOSED ||
-			    (sk->sk_shutdown & RCV_SHUTDOWN) ||
+			    sk->sk_shutdown & RCV_SHUTDOWN ||
 			    !timeo ||
 			    signal_pending(current) ||
 			    smc_cdc_rxed_any_close_or_senddone(conn) ||
@@ -123,8 +122,6 @@ int smc_rx_recvmsg(struct smc_sock *smc,
 			    peer_conn_abort)
 				break;
 		} else {
-			if (sock_flag(sk, SOCK_DONE))
-				break;
 			if (sk->sk_err) {
 				read_done = sock_error(sk);
 				break;
