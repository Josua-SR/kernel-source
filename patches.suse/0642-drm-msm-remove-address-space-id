From: Rob Clark <robdclark@gmail.com>
Date: Tue, 13 Jun 2017 14:27:45 -0400
Subject: drm/msm: remove address-space id
Git-commit: 8432a903fb97ac3640dbf9281e7c15a673b45747
Patch-mainline: v4.13-rc1
References: FATE#326289 FATE#326079 FATE#326049 FATE#322398 FATE#326166

Now that the msm_gem supports an arbitrary number of vma's, we no longer
need to assign an id (index) to each address space.  So rip out the
associated code.

Signed-off-by: Rob Clark <robdclark@gmail.com>
Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 drivers/gpu/drm/msm/mdp/mdp4/mdp4_kms.c |    7 -------
 drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c |    7 -------
 drivers/gpu/drm/msm/msm_drv.c           |   16 ----------------
 drivers/gpu/drm/msm/msm_drv.h           |   11 -----------
 drivers/gpu/drm/msm/msm_gem.h           |    1 -
 drivers/gpu/drm/msm/msm_gpu.c           |    2 --
 drivers/gpu/drm/msm/msm_gpu.h           |    1 -
 drivers/gpu/drm/msm/msm_kms.h           |    1 -
 8 files changed, 46 deletions(-)

--- a/drivers/gpu/drm/msm/mdp/mdp4/mdp4_kms.c
+++ b/drivers/gpu/drm/msm/mdp/mdp4/mdp4_kms.c
@@ -522,13 +522,6 @@ struct msm_kms *mdp4_kms_init(struct drm
 		aspace = NULL;
 	}
 
-	kms->id = msm_register_address_space(dev, aspace);
-	if (kms->id < 0) {
-		ret = kms->id;
-		dev_err(dev->dev, "failed to register mdp4 iommu: %d\n", ret);
-		goto fail;
-	}
-
 	ret = modeset_init(mdp4_kms);
 	if (ret) {
 		dev_err(dev->dev, "modeset_init failed: %d\n", ret);
--- a/drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c
+++ b/drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c
@@ -678,13 +678,6 @@ struct msm_kms *mdp5_kms_init(struct drm
 		aspace = NULL;;
 	}
 
-	kms->id = msm_register_address_space(dev, aspace);
-	if (kms->id < 0) {
-		ret = kms->id;
-		dev_err(&pdev->dev, "failed to register mdp5 iommu: %d\n", ret);
-		goto fail;
-	}
-
 	ret = modeset_init(mdp5_kms);
 	if (ret) {
 		dev_err(&pdev->dev, "modeset_init failed: %d\n", ret);
--- a/drivers/gpu/drm/msm/msm_drv.c
+++ b/drivers/gpu/drm/msm/msm_drv.c
@@ -51,22 +51,6 @@ static const struct drm_mode_config_func
 	.atomic_state_free = msm_atomic_state_free,
 };
 
-#include "msm_gem.h"  /* temporary */
-int msm_register_address_space(struct drm_device *dev,
-		struct msm_gem_address_space *aspace)
-{
-	struct msm_drm_private *priv = dev->dev_private;
-
-	if (WARN_ON(priv->num_aspaces >= ARRAY_SIZE(priv->aspace)))
-		return -EINVAL;
-
-	priv->aspace[priv->num_aspaces] = aspace;
-
-	aspace->id = priv->num_aspaces++;
-
-	return aspace->id;
-}
-
 #ifdef CONFIG_DRM_MSM_REGISTER_LOGGING
 static bool reglog = false;
 MODULE_PARM_DESC(reglog, "Enable register read/write logging");
--- a/drivers/gpu/drm/msm/msm_drv.h
+++ b/drivers/gpu/drm/msm/msm_drv.h
@@ -123,14 +123,6 @@ struct msm_drm_private {
 	uint32_t pending_crtcs;
 	wait_queue_head_t pending_crtcs_event;
 
-	/* Registered address spaces.. currently this is fixed per # of
-	 * iommu's.  Ie. one for display block and one for gpu block.
-	 * Eventually, to do per-process gpu pagetables, we'll want one
-	 * of these per-process.
-	 */
-	unsigned int num_aspaces;
-	struct msm_gem_address_space *aspace[NUM_DOMAINS];
-
 	unsigned int num_planes;
 	struct drm_plane *planes[16];
 
@@ -183,9 +175,6 @@ struct drm_atomic_state *msm_atomic_stat
 void msm_atomic_state_clear(struct drm_atomic_state *state);
 void msm_atomic_state_free(struct drm_atomic_state *state);
 
-int msm_register_address_space(struct drm_device *dev,
-		struct msm_gem_address_space *aspace);
-
 void msm_gem_unmap_vma(struct msm_gem_address_space *aspace,
 		struct msm_gem_vma *vma, struct sg_table *sgt);
 int msm_gem_map_vma(struct msm_gem_address_space *aspace,
--- a/drivers/gpu/drm/msm/msm_gem.h
+++ b/drivers/gpu/drm/msm/msm_gem.h
@@ -33,7 +33,6 @@ struct msm_gem_address_space {
 	struct drm_mm mm;
 	struct msm_mmu *mmu;
 	struct kref kref;
-	int id;    /* temporary */
 };
 
 struct msm_gem_vma {
--- a/drivers/gpu/drm/msm/msm_gpu.c
+++ b/drivers/gpu/drm/msm/msm_gpu.c
@@ -659,8 +659,6 @@ int msm_gpu_init(struct drm_device *drm,
 	} else {
 		dev_info(drm->dev, "%s: no IOMMU, fallback to VRAM carveout!\n", name);
 	}
-	gpu->id = msm_register_address_space(drm, gpu->aspace);
-
 
 	/* Create ringbuffer: */
 	mutex_lock(&drm->struct_mutex);
--- a/drivers/gpu/drm/msm/msm_gpu.h
+++ b/drivers/gpu/drm/msm/msm_gpu.h
@@ -106,7 +106,6 @@ struct msm_gpu {
 	int irq;
 
 	struct msm_gem_address_space *aspace;
-	int id;
 
 	/* Power Control: */
 	struct regulator *gpu_reg, *gpu_cx;
--- a/drivers/gpu/drm/msm/msm_kms.h
+++ b/drivers/gpu/drm/msm/msm_kms.h
@@ -74,7 +74,6 @@ struct msm_kms {
 	int irq;
 
 	/* mapper-id used to request GEM buffer mapped for scanout: */
-	int id;
 	struct msm_gem_address_space *aspace;
 };
 
