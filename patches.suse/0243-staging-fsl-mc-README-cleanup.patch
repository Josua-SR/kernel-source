From: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Date: Tue, 16 Jan 2018 15:19:09 +0200
Subject: staging: fsl-mc: README cleanup

Git-commit: 2abce12ebf02fd30569555d51af02a6e74e8a6f1
Patch-mainline: v4.16-rc1
References: fate#326530,fate#326531,fate#326535,fate#326538,fate#326539

Minor cosmetic changes to the DPAA2 overview documentation file.
Add a reference to the mc-bus driver sysfs documentation.

Signed-off-by: Ioana Radulescu <ruxandra.radulescu@nxp.com>
Reviewed-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Mian Yousaf Kaukab <yousaf.kaukab@suse.com>
---
 drivers/staging/fsl-mc/README.txt | 33 +++++++++++++++++----------------
 1 file changed, 17 insertions(+), 16 deletions(-)

diff --git a/drivers/staging/fsl-mc/README.txt b/drivers/staging/fsl-mc/README.txt
index 524eda1de04f..0ea5cd7d8dc6 100644
--- a/drivers/staging/fsl-mc/README.txt
+++ b/drivers/staging/fsl-mc/README.txt
@@ -1,7 +1,7 @@
 Copyright (C) 2015 Freescale Semiconductor Inc.
 
-DPAA2 (Data Path Acceleration Architecture Gen2)
-------------------------------------------------
+DPAA2 (Data Path Acceleration Architecture Gen2) Overview
+---------------------------------------------------------
 
 This document provides an overview of the Freescale DPAA2 architecture
 and how it is integrated into the Linux kernel.
@@ -17,8 +17,8 @@ Contents summary
         -Ethernet
         -MAC
 
-DPAA2 Overview
---------------
+Introduction
+------------
 
 DPAA2 is a hardware architecture designed for high-speeed network
 packet processing.  DPAA2 consists of sophisticated mechanisms for
@@ -35,7 +35,7 @@ network ports to create functional objects/devices such as network
 interfaces, an L2 switch, or accelerator instances.
 
 The MC provides memory-mapped I/O command interfaces (MC portals)
-which DPAA2 software drivers use to operate on DPAA2 objects:
+which DPAA2 software drivers use to operate on DPAA2 objects.
 
 The diagram below shows an overview of the DPAA2 resource management
 architecture:
@@ -130,8 +130,7 @@ in creating a network interfaces.
     level.
 
     DPRCs can be defined statically and populated with objects
-    via a config file passed to the MC when firmware starts
-    it.
+    via a config file passed to the MC when firmware starts it.
 
 -DPAA2 Objects for an Ethernet Network Interface
 
@@ -217,8 +216,8 @@ in creating a network interfaces.
            -IRQs: command completion
            -commands: IRQ config, enable, reset
 
-    Object Connections
-    ------------------
+Object Connections
+------------------
     Some objects have explicit relationships that must
     be configured:
 
@@ -242,8 +241,8 @@ in creating a network interfaces.
           Ethernet driver configures the DPBPs associated with
           the network interface.
 
-    Interrupts
-    ----------
+Interrupts
+----------
     All interrupts generated by DPAA2 objects are message
     interrupts.  At the hardware level message interrupts
     generated by devices will normally have 3 components--
@@ -255,8 +254,8 @@ in creating a network interfaces.
     For ARM-based SoC this is the same as the stream ID.
 
 
-DPAA2 Linux Driver Overview
----------------------------
+DPAA2 Linux Drivers Overview
+----------------------------
 
 This section provides an overview of the Linux kernel drivers for
 DPAA2-- 1) the bus driver and associated "DPAA2 infrastructure"
@@ -291,7 +290,7 @@ of each driver follows.
           +----+--------------+                     |              +--+---+
           |   MC-bus driver   |                     |              | PHY  |
           |                   |                     |              |driver|
-          | /soc/fsl-mc       |                     |              +--+---+
+          | /bus/fsl-mc       |                     |              +--+---+
           +-------------------+                     |                 |
                                                     |                 |
  ================================ HARDWARE =========|=================|======
@@ -322,6 +321,8 @@ A brief description of each driver is provided below.
         a bind of the root DPRC to the DPRC driver
     The binding for the MC-bus device-tree node can be consulted here:
         Documentation/devicetree/bindings/misc/fsl,qoriq-mc.txt
+    The sysfs bind/unbind interfaces for the MC-bus can be consulted here:
+        Documentation/ABI/testing/sysfs-bus-fsl-mc*
 
     DPRC driver
     -----------
@@ -366,8 +367,8 @@ A brief description of each driver is provided below.
     active in the kernel--  Ethernet, crypto, compression,
     etc.
 
-    Ethernet
-    --------
+    Ethernet driver
+    ---------------
     The Ethernet driver is bound to a DPNI and implements the kernel
     interfaces needed to connect the DPAA2 network interface to
     the network stack.
-- 
2.11.0

