From: Song Liu <songliubraving@fb.com>
Date: Fri, 24 Jul 2020 13:05:02 -0700
Subject: bpf: Fix build on architectures with special bpf_user_pt_regs_t
Patch-mainline: v5.9-rc1
Git-commit: 2b9b305fcdda1810bdffeb599361174eb2cd0b7c
References: bsc#1177028

Architectures like s390, powerpc, arm64, riscv have speical definition of
bpf_user_pt_regs_t. So we need to cast the pointer before passing it to
bpf_get_stack(). This is similar to bpf_get_stack_tp().

Fixes: 03d42fd2d83f ("bpf: Separate bpf_get_[stack|stackid] for perf events BPF")
Reported-by: kernel test robot <lkp@intel.com>
Signed-off-by: Song Liu <songliubraving@fb.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200724200503.3629591-1-songliubraving@fb.com
Acked-by: Gary Lin <glin@suse.com>
---
 kernel/bpf/stackmap.c |    9 ++++-----
 1 file changed, 4 insertions(+), 5 deletions(-)

--- a/kernel/bpf/stackmap.c
+++ b/kernel/bpf/stackmap.c
@@ -685,6 +685,7 @@ const struct bpf_func_proto bpf_get_task
 BPF_CALL_4(bpf_get_stack_pe, struct bpf_perf_event_data_kern *, ctx,
 	   void *, buf, u32, size, u64, flags)
 {
+	struct pt_regs *regs = (struct pt_regs *)(ctx->regs);
 	struct perf_event *event = ctx->event;
 	struct perf_callchain_entry *trace;
 	bool kernel, user;
@@ -692,7 +693,7 @@ BPF_CALL_4(bpf_get_stack_pe, struct bpf_
 	__u64 nr_kernel;
 
 	if (!(event->attr.sample_type & __PERF_SAMPLE_CALLCHAIN_EARLY))
-		return __bpf_get_stack(ctx->regs, NULL, NULL, buf, size, flags);
+		return __bpf_get_stack(regs, NULL, NULL, buf, size, flags);
 
 	if (unlikely(flags & ~(BPF_F_SKIP_FIELD_MASK | BPF_F_USER_STACK |
 			       BPF_F_USER_BUILD_ID)))
@@ -712,8 +713,7 @@ BPF_CALL_4(bpf_get_stack_pe, struct bpf_
 		__u64 nr = trace->nr;
 
 		trace->nr = nr_kernel;
-		err = __bpf_get_stack(ctx->regs, NULL, trace, buf,
-				      size, flags);
+		err = __bpf_get_stack(regs, NULL, trace, buf, size, flags);
 
 		/* restore nr */
 		trace->nr = nr;
@@ -725,8 +725,7 @@ BPF_CALL_4(bpf_get_stack_pe, struct bpf_
 			goto clear;
 
 		flags = (flags & ~BPF_F_SKIP_FIELD_MASK) | skip;
-		err = __bpf_get_stack(ctx->regs, NULL, trace, buf,
-				      size, flags);
+		err = __bpf_get_stack(regs, NULL, trace, buf, size, flags);
 	}
 	return err;
 
