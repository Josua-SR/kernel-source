From: Chris Wilson <chris@chris-wilson.co.uk>
Date: Thu, 5 Jul 2018 07:56:51 +0100
Subject: drm/i915: Remove defunct i915->vm_list
Git-commit: cef08fdc743c4211aeba69dd23408093d59da241
Patch-mainline: v4.19-rc1
References: FATE#326289 FATE#326079 FATE#326049 FATE#322398 FATE#326166

No longer used and can be removed. One less global that currently
demands struct_mutex protection.

References: e9e7dc4144cd ("drm/i915/gtt: Make gen6 page directories evictable")
Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20180705065653.20449-1-chris@chris-wilson.co.uk

Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 drivers/gpu/drm/i915/i915_drv.h           |    1 -
 drivers/gpu/drm/i915/i915_gem_gtt.c       |    5 -----
 drivers/gpu/drm/i915/i915_gem_gtt.h       |    1 -
 drivers/gpu/drm/i915/selftests/mock_gtt.c |    3 ---
 4 files changed, 10 deletions(-)

--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1744,7 +1744,6 @@ struct drm_i915_private {
 	struct drm_atomic_state *modeset_restore_state;
 	struct drm_modeset_acquire_ctx reset_ctx;
 
-	struct list_head vm_list; /* Global list of all address spaces */
 	struct i915_ggtt ggtt; /* VM representing the global address space */
 
 	struct i915_gem_mm mm;
--- a/drivers/gpu/drm/i915/i915_gem_gtt.c
+++ b/drivers/gpu/drm/i915/i915_gem_gtt.c
@@ -540,8 +540,6 @@ static void i915_address_space_init(stru
 	INIT_LIST_HEAD(&vm->active_list);
 	INIT_LIST_HEAD(&vm->inactive_list);
 	INIT_LIST_HEAD(&vm->unbound_list);
-
-	list_add_tail(&vm->global_link, &dev_priv->vm_list);
 }
 
 static void i915_address_space_fini(struct i915_address_space *vm)
@@ -553,7 +551,6 @@ static void i915_address_space_fini(stru
 	spin_unlock(&vm->free_pages.lock);
 
 	drm_mm_takedown(&vm->mm);
-	list_del(&vm->global_link);
 }
 
 static int __setup_page_dma(struct i915_address_space *vm,
@@ -3572,8 +3569,6 @@ int i915_ggtt_init_hw(struct drm_i915_pr
 
 	stash_init(&dev_priv->mm.wc_stash);
 
-	INIT_LIST_HEAD(&dev_priv->vm_list);
-
 	/* Note that we use page colouring to enforce a guard page at the
 	 * end of the address space. This is required as the CS may prefetch
 	 * beyond the end of the batch buffer, across the page boundary,
--- a/drivers/gpu/drm/i915/i915_gem_gtt.h
+++ b/drivers/gpu/drm/i915/i915_gem_gtt.h
@@ -288,7 +288,6 @@ struct i915_address_space {
 	 * assign blame.
 	 */
 	struct drm_i915_file_private *file;
-	struct list_head global_link;
 	u64 total;		/* size addr space maps (ex. 2GB for ggtt) */
 	u64 reserved;		/* size addr space reserved */
 
--- a/drivers/gpu/drm/i915/selftests/mock_gtt.c
+++ b/drivers/gpu/drm/i915/selftests/mock_gtt.c
@@ -74,7 +74,6 @@ mock_ppgtt(struct drm_i915_private *i915
 	INIT_LIST_HEAD(&ppgtt->vm.inactive_list);
 	INIT_LIST_HEAD(&ppgtt->vm.unbound_list);
 
-	INIT_LIST_HEAD(&ppgtt->vm.global_link);
 	drm_mm_init(&ppgtt->vm.mm, 0, ppgtt->vm.total);
 
 	ppgtt->vm.clear_range = nop_clear_range;
@@ -106,8 +105,6 @@ void mock_init_ggtt(struct drm_i915_priv
 {
 	struct i915_ggtt *ggtt = &i915->ggtt;
 
-	INIT_LIST_HEAD(&i915->vm_list);
-
 	ggtt->vm.i915 = i915;
 
 	ggtt->gmadr = (struct resource) DEFINE_RES_MEM(0, 2048 * PAGE_SIZE);
