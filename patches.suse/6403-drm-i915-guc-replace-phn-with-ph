From: Chris Wilson <chris@chris-wilson.co.uk>
Date: Tue, 10 Apr 2018 12:14:17 +0100
Subject: drm/i915/guc: Replace %phn with %ph
Git-commit: 2184b3d69b961b5beb2781acf200b5b93643e32a
Patch-mainline: v4.18-rc1
References: FATE#326289 FATE#326079 FATE#326049 FATE#322398 FATE#326166

%phn is not a valid specifier, and the trailing 'n' is being eaten by
the format-specifier and defaulting to the ' ' separator. Avoid angering
smatch by using the unknown specifier, and use the default we expect.

drivers/gpu/drm/i915/intel_guc_ct.c:616 ctb_read() warn: '%ph' cannot be followed by 'n'
drivers/gpu/drm/i915/intel_guc_ct.c:616 ctb_read() warn: '%ph' cannot be followed by 'n'
drivers/gpu/drm/i915/intel_guc_ct.c:616 ctb_read() warn: '%ph' cannot be followed by 'n'
drivers/gpu/drm/i915/intel_guc_ct.c:669 ct_handle_response() warn: '%ph' cannot be followed by 'n'
drivers/gpu/drm/i915/intel_guc_ct.c:679 ct_handle_response() warn: '%ph' cannot be followed by 'n'
drivers/gpu/drm/i915/intel_guc_ct.c:693 ct_handle_response() warn: '%ph' cannot be followed by 'n'
drivers/gpu/drm/i915/intel_guc_ct.c:707 ct_handle_response() warn: '%ph' cannot be followed by 'n'
drivers/gpu/drm/i915/intel_guc_ct.c:727 ct_process_request() warn: '%ph' cannot be followed by 'n'
drivers/gpu/drm/i915/intel_guc_ct.c:803 ct_handle_request() warn: '%ph' cannot be followed by 'n'

Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
Cc: Michal Wajdeczko <michal.wajdeczko@intel.com>
Cc: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
Reviewed-by: Michal Wajdeczko <michal.wajdeczko@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20180410111417.27563-1-chris@chris-wilson.co.uk

Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 drivers/gpu/drm/i915/intel_guc_ct.c |   20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

--- a/drivers/gpu/drm/i915/intel_guc_ct.c
+++ b/drivers/gpu/drm/i915/intel_guc_ct.c
@@ -361,7 +361,7 @@ static int ctb_write(struct intel_guc_ct
 		 (want_response ? GUC_CT_MSG_SEND_STATUS : 0) |
 		 (action[0] << GUC_CT_MSG_ACTION_SHIFT);
 
-	CT_DEBUG_DRIVER("CT: writing %*phn %*phn %*phn\n",
+	CT_DEBUG_DRIVER("CT: writing %*ph %*ph %*ph\n",
 			4, &header, 4, &fence,
 			4 * (len - 1), &action[1]);
 
@@ -613,7 +613,7 @@ static int ctb_read(struct intel_guc_ct_
 	/* message len with header */
 	len = ct_header_get_len(data[0]) + 1;
 	if (unlikely(len > (u32)available)) {
-		DRM_ERROR("CT: incomplete message %*phn %*phn %*phn\n",
+		DRM_ERROR("CT: incomplete message %*ph %*ph %*ph\n",
 			  4, data,
 			  4 * (head + available - 1 > size ?
 			       size - head : available - 1), &cmds[head],
@@ -626,7 +626,7 @@ static int ctb_read(struct intel_guc_ct_
 		data[i] = cmds[head];
 		head = (head + 1) % size;
 	}
-	CT_DEBUG_DRIVER("CT: received %*phn\n", 4 * len, data);
+	CT_DEBUG_DRIVER("CT: received %*ph\n", 4 * len, data);
 
 	desc->head = head * 4;
 	return 0;
@@ -666,7 +666,7 @@ static int ct_handle_response(struct int
 
 	/* Response payload shall at least include fence and status */
 	if (unlikely(len < 2)) {
-		DRM_ERROR("CT: corrupted response %*phn\n", 4 * msglen, msg);
+		DRM_ERROR("CT: corrupted response %*ph\n", 4 * msglen, msg);
 		return -EPROTO;
 	}
 
@@ -676,7 +676,7 @@ static int ct_handle_response(struct int
 
 	/* Format of the status follows RESPONSE message */
 	if (unlikely(!INTEL_GUC_MSG_IS_RESPONSE(status))) {
-		DRM_ERROR("CT: corrupted response %*phn\n", 4 * msglen, msg);
+		DRM_ERROR("CT: corrupted response %*ph\n", 4 * msglen, msg);
 		return -EPROTO;
 	}
 
@@ -690,7 +690,7 @@ static int ct_handle_response(struct int
 			continue;
 		}
 		if (unlikely(datalen > req->response_len)) {
-			DRM_ERROR("CT: response %u too long %*phn\n",
+			DRM_ERROR("CT: response %u too long %*ph\n",
 				  req->fence, 4 * msglen, msg);
 			datalen = 0;
 		}
@@ -704,7 +704,7 @@ static int ct_handle_response(struct int
 	spin_unlock(&ct->lock);
 
 	if (!found)
-		DRM_ERROR("CT: unsolicited response %*phn\n", 4 * msglen, msg);
+		DRM_ERROR("CT: unsolicited response %*ph\n", 4 * msglen, msg);
 	return 0;
 }
 
@@ -713,7 +713,7 @@ static void ct_process_request(struct in
 {
 	struct intel_guc *guc = ct_to_guc(ct);
 
-	CT_DEBUG_DRIVER("CT: request %x %*phn\n", action, 4 * len, payload);
+	CT_DEBUG_DRIVER("CT: request %x %*ph\n", action, 4 * len, payload);
 
 	switch (action) {
 	case INTEL_GUC_ACTION_DEFAULT:
@@ -724,7 +724,7 @@ static void ct_process_request(struct in
 
 	default:
 fail_unexpected:
-		DRM_ERROR("CT: unexpected request %x %*phn\n",
+		DRM_ERROR("CT: unexpected request %x %*ph\n",
 			  action, 4 * len, payload);
 		break;
 	}
@@ -800,7 +800,7 @@ static int ct_handle_request(struct inte
 
 	request = kmalloc(sizeof(*request) + 4 * msglen, GFP_ATOMIC);
 	if (unlikely(!request)) {
-		DRM_ERROR("CT: dropping request %*phn\n", 4 * msglen, msg);
+		DRM_ERROR("CT: dropping request %*ph\n", 4 * msglen, msg);
 		return 0; /* XXX: -ENOMEM ? */
 	}
 	memcpy(request->msg, msg, 4 * msglen);
