From: Jon Hunter <jonathanh@nvidia.com>
Date: Thu, 6 Aug 2020 13:54:31 +0100
Subject: rtc: max77686: Fix wake-ups for max77620

Git-commit: 16c24801122e2961c588562f04707b98f9c84bbb
Patch-mainline: v5.9-rc1
References: jsc#SLE-15847

Following commit d8f090dbeafd ("rtc: max77686: Do not allow interrupt to
fire before system resume"), RTC wake-ups stopped working on Jetson TX2
and Jetson Xavier platforms. The Jetson TX2 uses the max77620 PMIC and
the Jetson Xavier uses max20024 PMIC. Both of these PMICs have the same
max77620 RTC controller.

For the max77620 RTC, the variable 'rtc_irq_from_platform' is defined as
true in the max77686 driver and because of this the IRQ passed to the
max77686 driver for RTC is the PMIC IRQ and not the parent. Hence,
following commit d8f090dbeafd ("rtc: max77686: Do not allow interrupt to
fire before system resume"), for the max77620 the RTC IRQ within the
PMIC is now getting disabled on entry to suspend and unable to wake the
system up. Fix this by only disabling interrupts on entry to suspend
in the max77686 RTC driver, if the interrupt is the parent interrupt.

Fixes: d8f090dbeafd ("rtc: max77686: Do not allow interrupt to fire before system resume")
Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
Tested-by: Thierry Reding <treding@nvidia.com>
Reviewed-by: Thierry Reding <treding@nvidia.com>
Acked-by: Krzysztof Kozlowski <krzk@kernel.org>
Link: https://lore.kernel.org/r/20200806125431.699339-1-jonathanh@nvidia.com
Signed-off-by: Mian Yousaf Kaukab <yousaf.kaukab@suse.com>
---
 drivers/rtc/rtc-max77686.c | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/drivers/rtc/rtc-max77686.c b/drivers/rtc/rtc-max77686.c
index 645de5af707b..d51cc12114cb 100644
--- a/drivers/rtc/rtc-max77686.c
+++ b/drivers/rtc/rtc-max77686.c
@@ -815,13 +815,15 @@ static int max77686_rtc_suspend(struct device *dev)
 	}
 
 	/*
-	 * Main IRQ (not virtual) must be disabled during suspend because if it
-	 * happens while suspended it will be handled before resuming I2C.
+	 * If the main IRQ (not virtual) is the parent IRQ, then it must be
+	 * disabled during suspend because if it happens while suspended it
+	 * will be handled before resuming I2C.
 	 *
 	 * Since Main IRQ is shared, all its users should disable it to be sure
 	 * it won't fire while one of them is still suspended.
 	 */
-	disable_irq(info->rtc_irq);
+	if (!info->drv_data->rtc_irq_from_platform)
+		disable_irq(info->rtc_irq);
 
 	return ret;
 }
@@ -830,7 +832,8 @@ static int max77686_rtc_resume(struct device *dev)
 {
 	struct max77686_rtc_info *info = dev_get_drvdata(dev);
 
-	enable_irq(info->rtc_irq);
+	if (!info->drv_data->rtc_irq_from_platform)
+		enable_irq(info->rtc_irq);
 
 	if (device_may_wakeup(dev)) {
 		struct max77686_rtc_info *info = dev_get_drvdata(dev);
-- 
2.26.2

