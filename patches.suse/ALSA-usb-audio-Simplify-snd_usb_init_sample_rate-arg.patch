From 953a446b50fd6c68f0a40f0cd79a2a903faf3243 Mon Sep 17 00:00:00 2001
From: Takashi Iwai <tiwai@suse.de>
Date: Mon, 23 Nov 2020 09:53:25 +0100
Subject: [PATCH 19/41] ALSA: usb-audio: Simplify snd_usb_init_sample_rate() arguments
References: bsc#1178203
Patch-mainline: v5.11-rc1
Git-commit: 953a446b50fd6c68f0a40f0cd79a2a903faf3243

A preliminary change for the later big changes.  This is a minor code
refactoring to drop the unnecessary arguments that can be retrieved in
a different way.

Tested-by: Keith Milner <kamilner@superlative.org>
Tested-by: Dylan Robinson <dylan_robinson@motu.com>
Link: https://lore.kernel.org/r/20201123085347.19667-20-tiwai@suse.de
Signed-off-by: Takashi Iwai <tiwai@suse.de>

---
 sound/usb/clock.c  |   29 +++++++++++++++--------------
 sound/usb/clock.h  |    3 +--
 sound/usb/pcm.c    |    2 --
 sound/usb/quirks.c |    2 +-
 sound/usb/stream.c |    2 +-
 5 files changed, 18 insertions(+), 20 deletions(-)

--- a/sound/usb/clock.c
+++ b/sound/usb/clock.c
@@ -481,15 +481,18 @@ int snd_usb_clock_find_source(struct snd
 	}
 }
 
-static int set_sample_rate_v1(struct snd_usb_audio *chip, int iface,
-			      struct usb_host_interface *alts,
+static int set_sample_rate_v1(struct snd_usb_audio *chip,
 			      struct audioformat *fmt, int rate)
 {
 	struct usb_device *dev = chip->dev;
+	struct usb_host_interface *alts;
 	unsigned int ep;
 	unsigned char data[3];
 	int err, crate;
 
+	alts = snd_usb_get_host_interface(chip, fmt->iface, fmt->altsetting);
+	if (!alts)
+		return -EINVAL;
 	if (get_iface_desc(alts)->bNumEndpoints < 1)
 		return -EINVAL;
 	ep = get_endpoint(alts, 0)->bEndpointAddress;
@@ -507,7 +510,7 @@ static int set_sample_rate_v1(struct snd
 			      data, sizeof(data));
 	if (err < 0) {
 		dev_err(&dev->dev, "%d:%d: cannot set freq %d to ep %#x\n",
-			iface, fmt->altsetting, rate, ep);
+			fmt->iface, fmt->altsetting, rate, ep);
 		return err;
 	}
 
@@ -525,7 +528,7 @@ static int set_sample_rate_v1(struct snd
 			      data, sizeof(data));
 	if (err < 0) {
 		dev_err(&dev->dev, "%d:%d: cannot get freq at ep %#x\n",
-			iface, fmt->altsetting, ep);
+			fmt->iface, fmt->altsetting, ep);
 		chip->sample_rate_read_error++;
 		return 0; /* some devices don't support reading */
 	}
@@ -607,8 +610,7 @@ int snd_usb_set_sample_rate_v2v3(struct
 	return get_sample_rate_v2v3(chip, fmt->iface, fmt->altsetting, clock);
 }
 
-static int set_sample_rate_v2v3(struct snd_usb_audio *chip, int iface,
-				struct usb_host_interface *alts,
+static int set_sample_rate_v2v3(struct snd_usb_audio *chip,
 				struct audioformat *fmt, int rate)
 {
 	struct usb_device *dev = chip->dev;
@@ -632,7 +634,7 @@ static int set_sample_rate_v2v3(struct s
 			return clock;
 	}
 
-	prev_rate = get_sample_rate_v2v3(chip, iface, fmt->altsetting, clock);
+	prev_rate = get_sample_rate_v2v3(chip, fmt->iface, fmt->altsetting, clock);
 	if (prev_rate == rate)
 		goto validation;
 
@@ -640,7 +642,7 @@ static int set_sample_rate_v2v3(struct s
 	if (cur_rate < 0) {
 		usb_audio_err(chip,
 			      "%d:%d: cannot set freq %d (v2/v3): err %d\n",
-			      iface, fmt->altsetting, rate, cur_rate);
+			      fmt->iface, fmt->altsetting, rate, cur_rate);
 		return cur_rate;
 	}
 
@@ -657,9 +659,9 @@ static int set_sample_rate_v2v3(struct s
 	/* Some devices doesn't respond to sample rate changes while the
 	 * interface is active. */
 	if (rate != prev_rate) {
-		usb_set_interface(dev, iface, 0);
+		usb_set_interface(dev, fmt->iface, 0);
 		snd_usb_set_interface_quirk(chip);
-		usb_set_interface(dev, iface, fmt->altsetting);
+		usb_set_interface(dev, fmt->iface, fmt->altsetting);
 		snd_usb_set_interface_quirk(chip);
 	}
 
@@ -670,14 +672,13 @@ validation:
 	return 0;
 }
 
-int snd_usb_init_sample_rate(struct snd_usb_audio *chip, int iface,
-			     struct usb_host_interface *alts,
+int snd_usb_init_sample_rate(struct snd_usb_audio *chip,
 			     struct audioformat *fmt, int rate)
 {
 	switch (fmt->protocol) {
 	case UAC_VERSION_1:
 	default:
-		return set_sample_rate_v1(chip, iface, alts, fmt, rate);
+		return set_sample_rate_v1(chip, fmt, rate);
 
 	case UAC_VERSION_3:
 		if (chip->badd_profile >= UAC3_FUNCTION_SUBCLASS_GENERIC_IO) {
@@ -688,7 +689,7 @@ int snd_usb_init_sample_rate(struct snd_
 		}
 		fallthrough;
 	case UAC_VERSION_2:
-		return set_sample_rate_v2v3(chip, iface, alts, fmt, rate);
+		return set_sample_rate_v2v3(chip, fmt, rate);
 	}
 }
 
--- a/sound/usb/clock.h
+++ b/sound/usb/clock.h
@@ -2,8 +2,7 @@
 #ifndef __USBAUDIO_CLOCK_H
 #define __USBAUDIO_CLOCK_H
 
-int snd_usb_init_sample_rate(struct snd_usb_audio *chip, int iface,
-			     struct usb_host_interface *alts,
+int snd_usb_init_sample_rate(struct snd_usb_audio *chip,
 			     struct audioformat *fmt, int rate);
 
 int snd_usb_clock_find_source(struct snd_usb_audio *chip,
--- a/sound/usb/pcm.c
+++ b/sound/usb/pcm.c
@@ -1017,8 +1017,6 @@ static int snd_usb_pcm_prepare(struct sn
 		iface = usb_ifnum_to_if(subs->dev, subs->cur_audiofmt->iface);
 		alts = &iface->altsetting[subs->cur_audiofmt->altset_idx];
 		ret = snd_usb_init_sample_rate(subs->stream->chip,
-					       subs->cur_audiofmt->iface,
-					       alts,
 					       subs->cur_audiofmt,
 					       subs->cur_rate);
 		if (ret < 0)
--- a/sound/usb/quirks.c
+++ b/sound/usb/quirks.c
@@ -178,7 +178,7 @@ static int create_fixed_stream_quirk(str
 		fp->maxpacksize = le16_to_cpu(get_endpoint(alts, 0)->wMaxPacketSize);
 	usb_set_interface(chip->dev, fp->iface, 0);
 	snd_usb_init_pitch(chip, fp->iface, alts, fp);
-	snd_usb_init_sample_rate(chip, fp->iface, alts, fp, fp->rate_max);
+	snd_usb_init_sample_rate(chip, fp, fp->rate_max);
 	return 0;
 
  error:
--- a/sound/usb/stream.c
+++ b/sound/usb/stream.c
@@ -1225,7 +1225,7 @@ static int __snd_usb_parse_audio_interfa
 		/* try to set the interface... */
 		usb_set_interface(chip->dev, iface_no, 0);
 		snd_usb_init_pitch(chip, iface_no, alts, fp);
-		snd_usb_init_sample_rate(chip, iface_no, alts, fp, fp->rate_max);
+		snd_usb_init_sample_rate(chip, fp, fp->rate_max);
 		usb_set_interface(chip->dev, iface_no, altno);
 	}
 	return 0;
