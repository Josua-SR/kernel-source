From: Bob Moore <robert.moore@intel.com>
Date: Wed, 14 Mar 2018 16:13:06 -0700
Subject: ACPICA: Rename a global for clarity, no functional change
Patch-mainline: v4.17-rc1
Git-commit: e7d970f6fca8bc7b9587f77bf8b11fa78abd9280
References: bsc#1117419

Was acpi_gbl_parse_table_as_term_list, changed to:
acpi_gbl_execute_tables_as_methods.

Signed-off-by: Bob Moore <robert.moore@intel.com>
Signed-off-by: Erik Schmauss <erik.schmauss@intel.com>
Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Acked-by: Lee, Chun-Yi <jlee@suse.com>
---
 drivers/acpi/acpica/evrgnini.c |    2 +-
 drivers/acpi/acpica/nsload.c   |    2 +-
 drivers/acpi/acpica/nsparse.c  |    2 +-
 drivers/acpi/acpica/tbdata.c   |    2 +-
 drivers/acpi/acpica/tbxfload.c |    2 +-
 drivers/acpi/acpica/utxfinit.c |    2 +-
 drivers/acpi/bus.c             |    6 +++---
 include/acpi/acpixf.h          |    7 +++----
 8 files changed, 12 insertions(+), 13 deletions(-)

--- a/drivers/acpi/acpica/evrgnini.c
+++ b/drivers/acpi/acpica/evrgnini.c
@@ -562,7 +562,7 @@ acpi_status acpi_ev_initialize_region(un
 				 *
 				 * See acpi_ns_exec_module_code
 				 */
-				if (!acpi_gbl_parse_table_as_term_list &&
+				if (!acpi_gbl_execute_tables_as_methods &&
 				    obj_desc->method.
 				    info_flags & ACPI_METHOD_MODULE_LEVEL) {
 					handler_obj =
--- a/drivers/acpi/acpica/nsload.c
+++ b/drivers/acpi/acpica/nsload.c
@@ -157,7 +157,7 @@ unlock:
 	 * other ACPI implementations. Optionally, the execution can be deferred
 	 * until later, see acpi_initialize_objects.
 	 */
-	if (!acpi_gbl_parse_table_as_term_list
+	if (!acpi_gbl_execute_tables_as_methods
 	    && !acpi_gbl_group_module_level_code) {
 		acpi_ns_exec_module_code_list();
 	}
--- a/drivers/acpi/acpica/nsparse.c
+++ b/drivers/acpi/acpica/nsparse.c
@@ -266,7 +266,7 @@ acpi_ns_parse_table(u32 table_index, str
 
 	ACPI_FUNCTION_TRACE(ns_parse_table);
 
-	if (acpi_gbl_parse_table_as_term_list) {
+	if (acpi_gbl_execute_tables_as_methods) {
 		ACPI_DEBUG_PRINT_RAW((ACPI_DB_PARSE,
 				      "%s: **** Start table execution pass\n",
 				      ACPI_GET_FUNCTION_NAME));
--- a/drivers/acpi/acpica/tbdata.c
+++ b/drivers/acpi/acpica/tbdata.c
@@ -968,7 +968,7 @@ acpi_tb_load_table(u32 table_index, stru
 
 	/* Execute any module-level code that was found in the table */
 
-	if (!acpi_gbl_parse_table_as_term_list
+	if (!acpi_gbl_execute_tables_as_methods
 	    && acpi_gbl_group_module_level_code) {
 		acpi_ns_exec_module_code_list();
 	}
--- a/drivers/acpi/acpica/tbxfload.c
+++ b/drivers/acpi/acpica/tbxfload.c
@@ -103,7 +103,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_load
 				"While loading namespace from ACPI tables"));
 	}
 
-	if (acpi_gbl_parse_table_as_term_list
+	if (acpi_gbl_execute_tables_as_methods
 	    || !acpi_gbl_group_module_level_code) {
 		/*
 		 * Initialize the objects that remain uninitialized. This
--- a/drivers/acpi/acpica/utxfinit.c
+++ b/drivers/acpi/acpica/utxfinit.c
@@ -265,7 +265,7 @@ acpi_status ACPI_INIT_FUNCTION acpi_init
 	 * all of the tables have been loaded. It is a legacy option and is
 	 * not compatible with other ACPI implementations. See acpi_ns_load_table.
 	 */
-	if (!acpi_gbl_parse_table_as_term_list
+	if (!acpi_gbl_execute_tables_as_methods
 	    && acpi_gbl_group_module_level_code) {
 		acpi_ns_exec_module_code_list();
 
--- a/drivers/acpi/bus.c
+++ b/drivers/acpi/bus.c
@@ -68,7 +68,7 @@ static int set_copy_dsdt(const struct dm
 #endif
 static int set_gbl_term_list(const struct dmi_system_id *id)
 {
-	acpi_gbl_parse_table_as_term_list = 1;
+	acpi_gbl_execute_tables_as_methods = 1;
 	return 0;
 }
 
@@ -1048,7 +1048,7 @@ void __init acpi_early_init(void)
 		goto error0;
 	}
 
-	if (!acpi_gbl_parse_table_as_term_list &&
+	if (!acpi_gbl_execute_tables_as_methods &&
 	    acpi_gbl_group_module_level_code) {
 		status = acpi_load_tables();
 		if (ACPI_FAILURE(status)) {
@@ -1138,7 +1138,7 @@ static int __init acpi_bus_init(void)
 	status = acpi_ec_ecdt_probe();
 	/* Ignore result. Not having an ECDT is not fatal. */
 
-	if (acpi_gbl_parse_table_as_term_list ||
+	if (acpi_gbl_execute_tables_as_methods ||
 	    !acpi_gbl_group_module_level_code) {
 		status = acpi_load_tables();
 		if (ACPI_FAILURE(status)) {
--- a/include/acpi/acpixf.h
+++ b/include/acpi/acpixf.h
@@ -198,13 +198,12 @@ ACPI_INIT_GLOBAL(u8, acpi_gbl_do_not_use
 ACPI_INIT_GLOBAL(u8, acpi_gbl_group_module_level_code, FALSE);
 
 /*
- * Optionally support module level code by parsing the entire table as
- * a term_list. Default is FALSE, do not execute entire table until some
- * lock order issues are fixed.
+ * Optionally support module level code by parsing an entire table as
+ * a method as it is loaded. Default is TRUE.
  * NOTE, this is essentially obsolete and will be removed soon
  * (01/2018).
  */
-ACPI_INIT_GLOBAL(u8, acpi_gbl_parse_table_as_term_list, TRUE);
+ACPI_INIT_GLOBAL(u8, acpi_gbl_execute_tables_as_methods, TRUE);
 
 /*
  * Optionally use 32-bit FADT addresses if and when there is a conflict
