From: Yossi Kuperman <yossiku@mellanox.com>
Date: Tue, 1 Aug 2017 12:49:07 +0300
Subject: esp6: Fix RX checksum after header pull
Patch-mainline: v4.14-rc1
Git-commit: a9b28c2bf05d9d9998d5d3c6453fd75bc4cf8a6d
References: bsc#1103990 FATE#326006

Both ip6_input_finish (non-GRO) and esp6_gro_receive (GRO) strip
the IPv6 header without adjusting skb->csum accordingly. As a
result CHECKSUM_COMPLETE breaks and "hw csum failure" is written
to the kernel log by netdev_rx_csum_fault (dev.c).

Fix skb->csum by substracting the checksum value of the pulled IPv6
header using a call to skb_postpull_rcsum.

This affects both transport and tunnel modes.

Note that the fix occurs far from the place that the header was
pulled. This is based on existing code, see:
ipv6_srh_rcv() in exthdrs.c and rawv6_rcv() in raw.c

Signed-off-by: Yossi Kuperman <yossiku@mellanox.com>
Signed-off-by: Ilan Tayari <ilant@mellanox.com>
Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
Acked-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
---
 net/ipv6/esp6.c |    2 ++
 1 file changed, 2 insertions(+)

--- a/net/ipv6/esp6.c
+++ b/net/ipv6/esp6.c
@@ -496,6 +496,8 @@ int esp6_input_done2(struct sk_buff *skb
 
 	trimlen = alen + padlen + 2;
 	if (skb->ip_summed == CHECKSUM_COMPLETE) {
+		skb_postpull_rcsum(skb, skb_network_header(skb),
+				   skb_network_header_len(skb));
 		csumdiff = skb_checksum(skb, skb->len - trimlen, trimlen, 0);
 		skb->csum = csum_block_sub(skb->csum, csumdiff,
 					   skb->len - trimlen);
