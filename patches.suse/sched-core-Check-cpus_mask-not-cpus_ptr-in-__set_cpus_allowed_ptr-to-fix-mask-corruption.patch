From 7e8474c3ba28dabfcfb524bbf11c32beed2ee82f Mon Sep 17 00:00:00 2001
From: Scott Wood <swood@redhat.com>
Date: Wed, 17 Jun 2020 14:17:42 +0200
Subject: [PATCH] sched/core: Check cpus_mask, not cpus_ptr in
 __set_cpus_allowed_ptr(), to fix mask corruption

References: bnc#1155798 (CPU scheduler functional and performance backports)
Patch-mainline: v5.8-rc3
Git-commit: fd844ba9ae59b51e34e77105d79f8eca780b3bd6

This function is concerned with the long-term CPU mask, not the
transitory mask the task might have while migrate disabled.  Before
this patch, if a task was migrate-disabled at the time
__set_cpus_allowed_ptr() was called, and the new mask happened to be
equal to the CPU that the task was running on, then the mask update
would be lost.

Signed-off-by: Scott Wood <swood@redhat.com>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lkml.kernel.org/r/20200617121742.cpxppyi7twxmpin7@linutronix.de
Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 kernel/sched/core.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 7cd71e312456..1312d08f8a0d 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -1531,7 +1531,7 @@ static int __set_cpus_allowed_ptr(struct task_struct *p,
 		goto out;
 	}
 
-	if (cpumask_equal(p->cpus_ptr, new_mask))
+	if (cpumask_equal(&p->cpus_mask, new_mask))
 		goto out;
 
 	/*
