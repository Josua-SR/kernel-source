From: Dmitry Yakunin <zeil@yandex-team.ru>
Date: Sat, 20 Jun 2020 18:30:51 +0300
Subject: tcp: Expose tcp_sock_set_keepidle_locked
Patch-mainline: v5.9-rc1
Git-commit: aad4a0a9513af962137c4842463d11ed491eec37
References: bsc#1177028

This is preparation for usage in bpf_setsockopt.

v2:
  - remove redundant EXPORT_SYMBOL (Alexei Starovoitov)

Signed-off-by: Dmitry Yakunin <zeil@yandex-team.ru>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200620153052.9439-2-zeil@yandex-team.ru
Acked-by: Gary Lin <glin@suse.com>
---
 include/linux/tcp.h |    1 +
 net/ipv4/tcp.c      |    6 +++---
 2 files changed, 4 insertions(+), 3 deletions(-)

--- a/include/linux/tcp.h
+++ b/include/linux/tcp.h
@@ -489,6 +489,7 @@ int tcp_skb_shift(struct sk_buff *to, st
 
 void tcp_sock_set_cork(struct sock *sk, bool on);
 int tcp_sock_set_keepcnt(struct sock *sk, int val);
+int tcp_sock_set_keepidle_locked(struct sock *sk, int val);
 int tcp_sock_set_keepidle(struct sock *sk, int val);
 int tcp_sock_set_keepintvl(struct sock *sk, int val);
 void tcp_sock_set_nodelay(struct sock *sk);
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -2898,7 +2898,7 @@ void tcp_sock_set_user_timeout(struct so
 }
 EXPORT_SYMBOL(tcp_sock_set_user_timeout);
 
-static int __tcp_sock_set_keepidle(struct sock *sk, int val)
+int tcp_sock_set_keepidle_locked(struct sock *sk, int val)
 {
 	struct tcp_sock *tp = tcp_sk(sk);
 
@@ -2925,7 +2925,7 @@ int tcp_sock_set_keepidle(struct sock *s
 	int err;
 
 	lock_sock(sk);
-	err = __tcp_sock_set_keepidle(sk, val);
+	err = tcp_sock_set_keepidle_locked(sk, val);
 	release_sock(sk);
 	return err;
 }
@@ -3124,7 +3124,7 @@ static int do_tcp_setsockopt(struct sock
 		break;
 
 	case TCP_KEEPIDLE:
-		err = __tcp_sock_set_keepidle(sk, val);
+		err = tcp_sock_set_keepidle_locked(sk, val);
 		break;
 	case TCP_KEEPINTVL:
 		if (val < 1 || val > MAX_TCP_KEEPINTVL)
