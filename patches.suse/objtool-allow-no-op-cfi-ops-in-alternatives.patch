From: Peter Zijlstra <peterz@infradead.org>
Date: Fri, 8 May 2020 12:34:33 +0200
Subject: objtool: Allow no-op CFI ops in alternatives
Git-commit: ab3852ab5cb8fd2e2c5bfa176e5f953353836907
Patch-mainline: v5.8-rc1
References: bsc#1169514

Randy reported a false-positive:

  arch/x86/hyperv/hv_apic.o: warning: objtool: hv_apic_write()+0x25: alternative modifies stack

What happens is that:

	alternative_io("movl %0, %P1", "xchgl %0, %P1", X86_BUG_11AP,
 13d:   89 9d 00 d0 7f ff       mov    %ebx,-0x803000(%rbp)

decodes to an instruction with CFI-ops because it modifies RBP.
However, due to this being a !frame-pointer build, that should not in
fact change the CFI state.

So instead of dis-allowing any CFI-op, verify the op would've actually
changed the CFI state.

Fixes: 7117f16bf460 ("objtool: Fix ORC vs alternatives")
Reported-by: Randy Dunlap <rdunlap@infradead.org>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
Acked-by: Randy Dunlap <rdunlap@infradead.org>
Tested-by: Randy Dunlap <rdunlap@infradead.org>
Acked-by: Miroslav Benes <mbenes@suse.cz>
---
 tools/objtool/check.c |   11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

--- a/tools/objtool/check.c
+++ b/tools/objtool/check.c
@@ -2012,6 +2012,7 @@ static int validate_branch(struct objtoo
 	struct alternative *alt;
 	struct instruction *insn, *next_insn;
 	struct section *sec;
+	struct cfi_state old_cfi;
 	u8 visited;
 	int ret;
 
@@ -2203,14 +2204,16 @@ static int validate_branch(struct objtoo
 			return 0;
 
 		case INSN_STACK:
-			if (insn->alt_group) {
-				WARN_FUNC("alternative modifies stack", sec, insn->offset);
-				return -1;
-			}
+			old_cfi = state.cfi;
 
 			if (update_cfi_state(insn, &state.cfi))
 				return 1;
 
+			if (insn->alt_group && memcmp(&state.cfi, &old_cfi, sizeof(struct cfi_state))) {
+				WARN_FUNC("alternative modifies stack", sec, insn->offset);
+				return -1;
+			}
+
 			if (insn->stack_op.dest.type == OP_DEST_PUSHF) {
 				if (!state.uaccess_stack) {
 					state.uaccess_stack = 1;
