From: Ido Schimmel <idosch@mellanox.com>
Date: Wed, 25 Jul 2018 09:24:01 +0300
Subject: mlxsw: spectrum_acl: Encapsulate C-TCAM region in A-TCAM region
Patch-mainline: v4.19-rc1
Git-commit: 57e56d369914996ed81581da04af7b04a256a20a
References: bsc#1112374

In Spectrum-2 the C-TCAM is only used for rules that can't fit in the
A-TCAM due to a limited number of masks per A-TCAM region.

In addition, rules inserted into the C-TCAM may affect rules residing in
the A-TCAM, by clearing their C-TCAM prune bit.

The two regions are thus closely related and can be thought of as if the
C-TCAM region is encapsulated in the A-TCAM one.

Change the data structures to reflect that before introducing A-TCAM
support and make C-TCAM region initialization part of the A-TCAM region
initialization sequence.

Signed-off-by: Ido Schimmel <idosch@mellanox.com>
Reviewed-by: Jiri Pirko <jiri@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
---
 drivers/net/ethernet/mellanox/mlxsw/spectrum2_acl_tcam.c |   16 +++++----------
 drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_atcam.c |    8 ++++++-
 drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.h  |    3 ++
 3 files changed, 16 insertions(+), 11 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum2_acl_tcam.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum2_acl_tcam.c
@@ -45,7 +45,7 @@ struct mlxsw_sp2_acl_tcam {
 };
 
 struct mlxsw_sp2_acl_tcam_region {
-	struct mlxsw_sp_acl_ctcam_region cregion;
+	struct mlxsw_sp_acl_atcam_region aregion;
 	struct mlxsw_sp_acl_tcam_region *region;
 };
 
@@ -133,14 +133,10 @@ mlxsw_sp2_acl_tcam_region_init(struct ml
 			       struct mlxsw_sp_acl_tcam_region *_region)
 {
 	struct mlxsw_sp2_acl_tcam_region *region = region_priv;
-	int err;
 
 	region->region = _region;
 
-	err = mlxsw_sp_acl_atcam_region_init(mlxsw_sp, _region);
-	if (err)
-		return err;
-	return mlxsw_sp_acl_ctcam_region_init(mlxsw_sp, &region->cregion,
+	return mlxsw_sp_acl_atcam_region_init(mlxsw_sp, &region->aregion,
 					      _region);
 }
 
@@ -149,7 +145,7 @@ mlxsw_sp2_acl_tcam_region_fini(struct ml
 {
 	struct mlxsw_sp2_acl_tcam_region *region = region_priv;
 
-	mlxsw_sp_acl_ctcam_region_fini(&region->cregion);
+	mlxsw_sp_acl_atcam_region_fini(&region->aregion);
 }
 
 static int
@@ -165,7 +161,7 @@ static void mlxsw_sp2_acl_tcam_chunk_ini
 	struct mlxsw_sp2_acl_tcam_region *region = region_priv;
 	struct mlxsw_sp2_acl_tcam_chunk *chunk = chunk_priv;
 
-	mlxsw_sp_acl_ctcam_chunk_init(&region->cregion, &chunk->cchunk,
+	mlxsw_sp_acl_ctcam_chunk_init(&region->aregion.cregion, &chunk->cchunk,
 				      priority);
 }
 
@@ -186,7 +182,7 @@ static int mlxsw_sp2_acl_tcam_entry_add(
 	struct mlxsw_sp2_acl_tcam_entry *entry = entry_priv;
 
 	entry->act_block = rulei->act_block;
-	return mlxsw_sp_acl_ctcam_entry_add(mlxsw_sp, &region->cregion,
+	return mlxsw_sp_acl_ctcam_entry_add(mlxsw_sp, &region->aregion.cregion,
 					    &chunk->cchunk, &entry->centry,
 					    rulei, true);
 }
@@ -199,7 +195,7 @@ static void mlxsw_sp2_acl_tcam_entry_del
 	struct mlxsw_sp2_acl_tcam_chunk *chunk = chunk_priv;
 	struct mlxsw_sp2_acl_tcam_entry *entry = entry_priv;
 
-	mlxsw_sp_acl_ctcam_entry_del(mlxsw_sp, &region->cregion,
+	mlxsw_sp_acl_ctcam_entry_del(mlxsw_sp, &region->aregion.cregion,
 				     &chunk->cchunk, &entry->centry);
 }
 
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_atcam.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_atcam.c
@@ -77,6 +77,7 @@ mlxsw_sp_acl_atcam_region_erp_init(struc
 }
 
 int mlxsw_sp_acl_atcam_region_init(struct mlxsw_sp *mlxsw_sp,
+				   struct mlxsw_sp_acl_atcam_region *aregion,
 				   struct mlxsw_sp_acl_tcam_region *region)
 {
 	int err;
@@ -90,8 +91,13 @@ int mlxsw_sp_acl_atcam_region_init(struc
 	err = mlxsw_sp_acl_atcam_region_erp_init(mlxsw_sp, region->id);
 	if (err)
 		return err;
+	return mlxsw_sp_acl_ctcam_region_init(mlxsw_sp, &aregion->cregion,
+					      region);
+}
 
-	return 0;
+void mlxsw_sp_acl_atcam_region_fini(struct mlxsw_sp_acl_atcam_region *aregion)
+{
+	mlxsw_sp_acl_ctcam_region_fini(&aregion->cregion);
 }
 
 int mlxsw_sp_acl_atcam_init(struct mlxsw_sp *mlxsw_sp,
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.h
@@ -163,6 +163,7 @@ struct mlxsw_sp_acl_atcam {
 };
 
 struct mlxsw_sp_acl_atcam_region {
+	struct mlxsw_sp_acl_ctcam_region cregion;
 	struct mlxsw_sp_acl_tcam_region *region;
 	struct mlxsw_sp_acl_atcam *atcam;
 	enum mlxsw_sp_acl_atcam_region_type type;
@@ -172,7 +173,9 @@ struct mlxsw_sp_acl_atcam_region {
 int mlxsw_sp_acl_atcam_region_associate(struct mlxsw_sp *mlxsw_sp,
 					u16 region_id);
 int mlxsw_sp_acl_atcam_region_init(struct mlxsw_sp *mlxsw_sp,
+				   struct mlxsw_sp_acl_atcam_region *aregion,
 				   struct mlxsw_sp_acl_tcam_region *region);
+void mlxsw_sp_acl_atcam_region_fini(struct mlxsw_sp_acl_atcam_region *aregion);
 int mlxsw_sp_acl_atcam_init(struct mlxsw_sp *mlxsw_sp,
 			    struct mlxsw_sp_acl_atcam *atcam);
 void mlxsw_sp_acl_atcam_fini(struct mlxsw_sp *mlxsw_sp,
