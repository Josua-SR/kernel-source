From e93e890e16ef5a0605b7cdc52b3bde50d88d7207 Mon Sep 17 00:00:00 2001
From: Takashi Iwai <tiwai@suse.de>
Date: Mon, 23 Nov 2020 09:53:13 +0100
Subject: [PATCH 07/41] ALSA: usb-audio: Improve some debug prints
References: bsc#1178203
Patch-mainline: Queued in subsystem maintainer repo
Git-repo: git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound.git
Git-commit: e93e890e16ef5a0605b7cdc52b3bde50d88d7207

There are a few rooms for improvements wrt the debug prints:
- The EP debug print is shown only at starting, not at stopping
- The EP debug print contains useless object addresses
- Some helpers show the urb and the EP object addresses, too

This patch addresses those shortcomings.

Tested-by: Keith Milner <kamilner@superlative.org>
Tested-by: Dylan Robinson <dylan_robinson@motu.com>
Link: https://lore.kernel.org/r/20201123085347.19667-8-tiwai@suse.de
Signed-off-by: Takashi Iwai <tiwai@suse.de>

---
 sound/usb/endpoint.c |  8 ++++----
 sound/usb/pcm.c      | 11 ++++++++---
 2 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/sound/usb/endpoint.c b/sound/usb/endpoint.c
index cf00871fd278..8205a64a734e 100644
--- a/sound/usb/endpoint.c
+++ b/sound/usb/endpoint.c
@@ -367,8 +367,8 @@ static void queue_pending_output_urbs(struct snd_usb_endpoint *ep)
 		err = usb_submit_urb(ctx->urb, GFP_ATOMIC);
 		if (err < 0)
 			usb_audio_err(ep->chip,
-				"Unable to submit urb #%d: %d (urb %p)\n",
-				ctx->index, err, ctx->urb);
+				      "Unable to submit urb #%d: %d at %s\n",
+				      ctx->index, err, __func__);
 		else
 			set_bit(ctx->index, &ep->active_mask);
 	}
@@ -494,8 +494,8 @@ struct snd_usb_endpoint *snd_usb_add_endpoint(struct snd_usb_audio *chip,
 				  alts->desc.bInterfaceNumber,
 				  alts->desc.bAlternateSetting);
 	if (ep) {
-		usb_audio_dbg(ep->chip, "Re-using EP %x in iface %d,%d @%p\n",
-			      ep_num, ep->iface, ep->altsetting, ep);
+		usb_audio_dbg(ep->chip, "Re-using EP %x in iface %d,%d\n",
+			      ep_num, ep->iface, ep->altsetting);
 		goto __exit_unlock;
 	}
 
diff --git a/sound/usb/pcm.c b/sound/usb/pcm.c
index 8800ec627a73..8f4fe65d5c37 100644
--- a/sound/usb/pcm.c
+++ b/sound/usb/pcm.c
@@ -218,7 +218,7 @@ static int start_endpoints(struct snd_usb_substream *subs)
 	if (!test_and_set_bit(SUBSTREAM_FLAG_DATA_EP_STARTED, &subs->flags)) {
 		struct snd_usb_endpoint *ep = subs->data_endpoint;
 
-		dev_dbg(&subs->dev->dev, "Starting data EP @%p\n", ep);
+		dev_dbg(&subs->dev->dev, "Starting data EP 0x%x\n", ep->ep_num);
 
 		ep->data_subs = subs;
 		err = snd_usb_endpoint_start(ep);
@@ -232,7 +232,7 @@ static int start_endpoints(struct snd_usb_substream *subs)
 	    !test_and_set_bit(SUBSTREAM_FLAG_SYNC_EP_STARTED, &subs->flags)) {
 		struct snd_usb_endpoint *ep = subs->sync_endpoint;
 
-		dev_dbg(&subs->dev->dev, "Starting sync EP @%p\n", ep);
+		dev_dbg(&subs->dev->dev, "Starting sync EP 0x%x\n", ep->ep_num);
 
 		ep->sync_slave = subs->data_endpoint;
 		err = snd_usb_endpoint_start(ep);
@@ -255,12 +255,17 @@ static void sync_pending_stops(struct snd_usb_substream *subs)
 static void stop_endpoints(struct snd_usb_substream *subs)
 {
 	if (test_and_clear_bit(SUBSTREAM_FLAG_SYNC_EP_STARTED, &subs->flags)) {
+		dev_dbg(&subs->dev->dev, "Stopping sync EP 0x%x\n",
+			subs->sync_endpoint->ep_num);
 		snd_usb_endpoint_stop(subs->sync_endpoint);
 		subs->sync_endpoint->sync_slave = NULL;
 	}
 
-	if (test_and_clear_bit(SUBSTREAM_FLAG_DATA_EP_STARTED, &subs->flags))
+	if (test_and_clear_bit(SUBSTREAM_FLAG_DATA_EP_STARTED, &subs->flags)) {
+		dev_dbg(&subs->dev->dev, "Stopping data EP 0x%x\n",
+			subs->data_endpoint->ep_num);
 		snd_usb_endpoint_stop(subs->data_endpoint);
+	}
 }
 
 /* PCM sync_stop callback */
-- 
2.16.4

